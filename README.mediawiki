=rcheckbook=

'''Author:''' Bryce Campbell

'''License:''' See LICENSE

'''Description:''' A Rust-based CLI ledger that can help you keep track 
of finances.

'''Version:''' 0.4.2

==Notes==

This program has been tested on macOS Big Sur, but <strong>should</strong> work on any platform.

===Version History===

<dl>
<dt style="font-weight:bold">0.1</dt>
<dd>
<p>Initial release. Could only function as a reader for bcheck files.</p>
<p>Released 7/21/2021.</p>
</dd>
<dt style="font-weight:bold">0.2</dt>
<dd>
<p>Add in capability to add, remove, and update transactions easily and move structure to using sub commands.</p>
<p>Released 7/25/2021.</p>
</dd>
<dt style="font-weight:bold">0.2.1</dt>
<dd>
<p>Reduce code by updating backend library.</p>
<p>Released 7/26/2021.</p>
</dd>
<dt style="font-weight:bold">0.2.2</dt>
<dd>
<p>Implement way to create register via program.</p>
<p>Released 10/8/2021.</p>
</dd>
<dt style="font-weight:bold">0.3</dt>
<dd>
<p>convert application into a checkbook ledger application with a database backend.</p>
<p>Released 11/18/2023.</p>
</dd>
<dt style="font-weight:bold">0.4</dt>
<dd>
<p>add in new ability to get summary of things within time period and allow register to be filtered by category.</p>
</dd>
<dt style="font-weight:bold">0.4.1</dt>
<dd>
<p>allow register to be searched by vendor, memo, and reconciled status, in addition to filtering by category.</p>
</dd>
<dt style="font-weight:bold">0.4.2</dt>
<dd>
<p>add support for importing and exporting QIF and 
have update method check if transactions have actually changed.</p>
</dd>
</dl>

===Questions===
<ol>
<li>
<dl>
<dt style="font-weight:bold">Why create this progrm, instead of porting the application you made?</dt>
<dd>
<p>While I would like to port over the application itself, which should not take much work, due to this program utilizing a library I made that can read and write bcheck files, it does not seem feasible at this time.</p>
<p>Also, since bcheck files are just JSON files with a different extension, it is possible to pretty much do everything in a text editor, so no real dedicated editor is needed for any platform.</p>
<p>This program was originally designed to only be a reader, so that Windows and Linux users can read their save files from the iOS application, and get details of their current balance, but now includes simple functionality to allow the same capabilities as the iOS and Mac app, with the exception of not having GUI.</p>
</dd>
</dl>
</li>
<li>
<dl>
<dt style="font-weight:bold">Why convert this program into a full ledger application now, after havving it be a reader for so long?</dt>
<dd>
<p>While I did initially create this project to read <strong>bcheck</strong> 
files, which my macOS and iOS <a href="https://github.com/bryceac/BCheckbook">apps</a> 
used as a default format, 
I did eventually add editing capabilities to this program and I added support 
for one more format in the crate used to read data, 
so I decided to make this app have a database backend, 
in order to make editing and getting running totals simplifier.</p>
<p>As a result, I could cut down on a lot of code and give this program 
some feature parity with my iOS app and macOS.</p>
</dd>
</dl>
</li>
<li>
<dl>
<dt style="font-weight:bold">If this application is closer to feature parity with the iOS app and macOS, 
does this mean this application supports QIF?</dt>
<dd>
<p>Initially, this was not possible, 
but starting in version 0.4.2, this application has now gained
support for QIF files.</p>
<p>However, 
due to issues with development of the macOS GUI app, 
the QIF files generated from this program might never be supported
in the edition.</p>
<p>The iOS app will likely see support for it, 
since I just need to update the QIF library to its latest version.</p>
</dd>
</dl>
</li>
</ol>

===Usage===

After installing the program, all you need to do is something like this:

<pre>rcheckbook import -i ~/Desktop/transaction.bcheck</pre>

This will copy the database to the following folder:

<pre>~/.checkbook</pre>

This folder location corresponds to your user folder.

and then import the data from the given file. 
The import is done based on file extension 
and only runs if you supply bcheck, QIF, or TSV files.

if you specify a different path before calling <strong>-i</strong> 
the database will be copied or read from that location instead.

====Display Register====

<pre>
rcheckbook list
</pre>

This will display transaction that looks like this:

<pre>
FF04C3DC-F0FE-472E-8737-0F4034C049F0	2021-07-08	1260	Y	Opening Balance	Sam Hill Credit Union	Open Account	500.00  500.00	
1422CBC6-7B0B-4584-B7AB-35167CC5647B	2021-07-08		N	Gifts	Fake Street Electronics	Head set		200 300.00
BB22187E-0BD3-41E8-B3D8-8136BD700865	2021-07-08		N		Velociraptor Entertainment	Pay Day	50000 50300.00
</pre>

This is the same as the TSV output, but includes another field for the balance, which is the final field.

To see what column corresponds to what, 
I recommend looking at the details regard <a href="https://github.com/bryceac/BCheckbook#user-content-Importing_TSV_Files">TSV imports</a> 
for the iOS and macOS app.

By appending <strong>-c</strong>, like this:

<pre>
rcheckbook list -c Utilities
</pre>

You can filter stuff down by category.

====Adding new Entries====

Transactions can be added like this:

<pre>
rcheckbook add --check-number 1260 --vendor "Sam Hill Credit Union" -m "Open Account" -a 500.0 -t deposit
</pre>

Everything but the vendor is optional, but this saves time in filling in details.

If no database exists, one will be copied over, 
like the import command from above.

====Removing Entries====

Entries can be removed like this:

<pre>
rcheckbook remove -i FF04C3DC-F0FE-472E-8737-0F4034C049F0
</pre>

This will look in the database and remove the record matching the identifier.

====Updating Entries====

If you made a mistake or want to mark items as reconciled, entries can be updated like this:

<pre>
rcheckbook update -i FF04C3DC-F0FE-472E-8737-0F4034C049F0 -r
</pre>

This will mark the record with the given identifier as reconciled.

====Summaries====

If you want to have a quick look at your register, and have an idea of what you've down, you can do this:

<pre>
rcheckbook summary
</pre>

This will lay out everything over the lifetime of the tracking.

However, if you want certain time frames, such as:

<ul>
<li>Week</li>
<li>Month</li>
<li>Quarter (3 months)</li>
<li>6 Months</li>
<li>Year</li>
</ul>

You just append the appropriate period.

For example, if you what everything in a 6 month period until now, you would do:

<pre>
rcheckbook summary half-year
</pre>

This will give you a break down by the categories you have and tell you how much money went or came from that.

Please be aware that the values reported are sums, so you'll need dedicated categories if you want better data.

===bcheck format===

If you choose to manga things via a text editor, these keys make up the JSON structure of a bcheck file.

<dl>
<dt style="font-style:bold">id</dt>
<dd>
<p>The record's identifier. If not specified, a UUID is generated. <strong>Optional</strong></p>
</dd>
<dt style="font-style:bold">transaction</dt>
<dd>
<p>The transaction that took place. <strong>Required</strong></p>
<p>This key contains an object with the following keys:</p>
<dl>
<dt style="font-style:bold">date</dt>
<dd>
<p>The date of the transaction. The date will the current date if it is not listed.</p>
<p>The format expected for the date is YYYY-MM-DD. <strong>Optional</strong></p>
</dd>
<dt style="font-style:bold">check_number</dt>
<dd>
<p>The check number for the transaction. This defaults to nothing, if empty. <strong>Optional</strong></p>
</dd>
<dt style="font-style:bold">vendor</dt>
<dd>
<p>The entity you did business with. <strong>Required</strong></p>
</dd>
<dt style="font-style:bold">memo</dt>
<dd>
<p>Brief note of the transaction. <strong>Optional</strong></p>
</dd>
<dt style="font-style:bold">amount</dt>
<dd>
<p>The amount of money that exchanged hands. <strong>Required</strong></p>
</dd>
<dt style="font-style:bold">type</dt>
<dd>
<p>The kind of transaction, which can only be either a <strong>deposit</strong> or <strong>withdrawal</strong>. Defaults to <strong>withdrawal</strong> if left out.<strong>Required</strong></p>
</dd>
<dt style="font-style:bold">is_reconciled</dt>
<dd>
<p>determines if transaction has been reconciled or not. If left out, this defaults to <strong>false</strong>. <strong>Optional</strong></p>
</dd>
</dl>
</dd>
</dl>

The file structure looks like this:

<pre>
[
  {
    "id" : "FF04C3DC-F0FE-472E-8737-0F4034C049F0",
    "transaction" : {
      "amount" : 500,
      "vendor" : "Sam Hill Credit Union",
      "memo" : "Open Account",
      "check_number" : 1260,
      "type" : "deposit",
      "date" : "2021-07-08"
    }
  },
  {
    "id" : "1422CBC6-7B0B-4584-B7AB-35167CC5647B",
    "transaction" : {
      "amount" : 200,
      "vendor" : "Fake Street Electronics",
      "memo" : "Head set",
      "type" : "withdrawal",
      "date" : "2021-07-08"
    }
  },
  {
    "id" : "BB22187E-0BD3-41E8-B3D8-8136BD700865",
    "transaction" : {
      "amount" : 50000,
      "vendor" : "Velociraptor Entertainment",
      "memo" : "Pay Day",
      "type" : "deposit",
      "date" : "2021-07-08"
    }
  }
]
</pre>

===Support===

If you experience troubles, use the email address below. I should be able to help you, due to this being a rather simple application, but do not be surprised if even I am stumped, due to most of my experience with programming has been with Swift.

tonyhawk2100@gmail.com
=rcheckbook=

'''Author:''' Bryce Campbell

'''License:''' See LICENSE

'''Description:''' A Rust-based CLI ledger that can help you keep track 
of finances.

'''Version:''' 0.3

==Notes==

This program has been tested on macOS Big Sur, but <strong>should</strong> work on any platform.

===Version History===

<dl>
<dt style="font-weight:bold">0.1</dt>
<dd>
<p>Initial release. Could only function as a reader for bcheck files.</p>
<p>Released 7/21/2021.</p>
</dd>
<dt style="font-weight:bold">0.2</dt>
<dd>
<p>Add in capability to add, remove, and update transactions easily and move structure to using sub commands.</p>
<p>Released 7/25/2021.</p>
</dd>
<dt style="font-weight:bold">0.2.1</dt>
<dd>
<p>Reduce code by updating backend library.</p>
<p>Released 7/26/2021.</p>
</dd>
<dt style="font-weight:bold">0.2.2</dt>
<dd>
<p>Implement way to create register via program.</p>
<p>Released 10/8/2021.</p>
</dd>
</dl>

===Questions===

<ol>
<li>
<dl>
<dt style="font-weight:bold">Why create this progrm, instead of porting the application you made?</dt>
<dd>
<p>While I would like to port over the application itself, which should not take much work, due to this program utilizing a library I made that can read and write bcheck files, it does not seem feasible at this time.</p>
<p>Also, since bcheck files are just JSON files with a different extension, it is possible to pretty much do everything in a text editor, so no real dedicated editor is needed for any platform.</p>
<p>This program was originally designed to only be a reader, so that Windows and Linux users can read their save files from the iOS application, and get details of their current balance, but now includes simple functionality to allow the same capabilities as the iOS and Mac app, with the exception of not having GUI.</p>
</dd>
</dl>
</li>
</ol>

===Usage===

After installing the program, all you need to do is something like this:

<pre>rcheckbook create ~/Desktop/transaction.bcheck</pre>

This will create a new register at the specified path, which <strong>should</strong> support Unix shorthands.

====Display Register====

<pre>
rcheckbook list ~/transactions.bcheck
</pre>

This will then generate output that looks like this:

<pre>
07/08/2021	1260	N	Sam Hill Credit Union; Open Account	500.00	x	500.00
07/08/2021	x	N	Fake Street Electronics; Head set	x	200.00	300.00
07/08/2021	x	N	Velociraptor Entertainment; Pay Day	50000.00	x	50300.00
</pre>

The <strong>N</strong> denotes if the transaction has been reconciled or not, with it being replaced with <strong>Y</strong>, if it has.

The <strong>x</strong>'s denote fields with no value, such as the first one having no withdrawal amount and the second having no deposit amount.

the number after the date is the check no, if one has been assigned.

If you include the <strong>show-ids</strong> flag, the record ids needed to remove or update transactions will be displayed before the date.

This action would look like this in a terminal emulator (e.g. Power Shell):

<pre>
rcheckbook list ~/transactions.bcheck --show-ids
</pre>

====Adding new Entries====

Transactions can be added like this:

<pre>
rcheckbook add ~/transaction.bcheck --check-number 1260 --vendor "Sam Hill Credit Union" -m "Open Account" -a 500.0 -t deposit
</pre>

Everything but the file path and the vendor is optional, but this saves time in filling in details.

====Removing Entries====

Entries can be removed like this:

<pre>
rcheckbook remove ~/transaction.bcheck -i FF04C3DC-F0FE-472E-8737-0F4034C049F0
</pre>

This will look in the bcheck file and remove the record matching the identifier.

====Updating Entries====

If you make a mistake or want to mark items as reconciled, entries can be updated like this:

<pre>
rcheckbook updaye ~/transaction.bcheck -i FF04C3DC-F0FE-472E-8737-0F4034C049F0 -r
</pre>

This will mark the record with the given identifier as reconciled.

===bcheck format===

If you choose to manga things via a text editor, these keys make up the JSON structure of a bcheck file.

<dl>
<dt style="font-style:bold">id</dt>
<dd>
<p>The record's identifier. If not specified, a UUID is generated. <strong>Optional</strong></p>
</dd>
<dt style="font-style:bold">transaction</dt>
<dd>
<p>The transaction that took place. <strong>Required</strong></p>
<p>This key contains an object with the following keys:</p>
<dl>
<dt style="font-style:bold">date</dt>
<dd>
<p>The date of the transaction. The date will the current date if it is not listed.</p>
<p>The format expected for the date is YYYY-MM-DD. <strong>Optional</strong></p>
</dd>
<dt style="font-style:bold">check_number</dt>
<dd>
<p>The check number for the transaction. This defaults to nothing, if empty. <strong>Optional</strong></p>
</dd>
<dt style="font-style:bold">vendor</dt>
<dd>
<p>The entity you did business with. <strong>Required</strong></p>
</dd>
<dt style="font-style:bold">memo</dt>
<dd>
<p>Brief note of the transaction. <strong>Optional</strong></p>
</dd>
<dt style="font-style:bold">amount</dt>
<dd>
<p>The amount of money that exchanged hands. <strong>Required</strong></p>
</dd>
<dt style="font-style:bold">type</dt>
<dd>
<p>The kind of transaction, which can only be either a <strong>deposit</strong> or <strong>withdrawal</strong>. <strong>Required</strong></p>
</dd>
<dt style="font-style:bold">is_reconciled</dt>
<dd>
<p>determines if transaction has been reconciled or not. If left out, this defaults to <strong>false</strong>. <strong>Optional</strong></p>
</dd>
</dl>
</dd>
</dl>

The file structure looks like this:

<pre>
[
  {
    "id" : "FF04C3DC-F0FE-472E-8737-0F4034C049F0",
    "transaction" : {
      "amount" : 500,
      "vendor" : "Sam Hill Credit Union",
      "memo" : "Open Account",
      "check_number" : 1260,
      "type" : "deposit",
      "date" : "2021-07-08"
    }
  },
  {
    "id" : "1422CBC6-7B0B-4584-B7AB-35167CC5647B",
    "transaction" : {
      "amount" : 200,
      "vendor" : "Fake Street Electronics",
      "memo" : "Head set",
      "type" : "withdrawal",
      "date" : "2021-07-08"
    }
  },
  {
    "id" : "BB22187E-0BD3-41E8-B3D8-8136BD700865",
    "transaction" : {
      "amount" : 50000,
      "vendor" : "Velociraptor Entertainment",
      "memo" : "Pay Day",
      "type" : "deposit",
      "date" : "2021-07-08"
    }
  }
]
</pre>

===Support===

If you experience troubles, use the email address below. I should be able to help you, due to this being a rather simple application, but do not be surprised if even I am stumped, de to most of my experience with programming has been with Swift.

tonyhawk2100@gmail.com